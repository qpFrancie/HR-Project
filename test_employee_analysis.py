# -*- coding: utf-8 -*-
"""test_employee_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovi8zA4dKhN4LEssp2oFJu3cM6wG5m_b

##**Test code description**
###The test code is designed to unit test several key data processing functions in the employee_analysis.py file. Through these tests, we can verify whether functions such as data loading, data cleaning, space removal, average salary calculation, and years of service statistics are running normally, thereby ensuring the reliability and correctness of data processing. The following is a detailed description of each test section:

##**Tested modules and functions**


*   load_data(file_path): Loads a CSV file from the specified path and returns the data.
*   clean_data(df): Cleans the data, including handling missing values, renaming columns, and converting data types.
*strip_spaces_from_columns(df, columns): Removes leading and trailing spaces from the specified columns.
*calculate_average_salary(df, department): Calculates the average salary of the specified department.
*find_employees_with_experience(df, years): Finds employees with the specified number of years of experience.
*get_department_statistics(df): Returns statistics for each department, including average salary and average years of experience.
"""

import unittest
import pandas as pd
from employee_analysis import load_data, clean_data, strip_spaces_from_columns, calculate_average_salary, find_employees_with_experience, get_department_statistics

class TestEmployeeDataAnalysis(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """ Load data once for testing all functions """
        cls.df = load_data('./employees.csv')
        if cls.df is not None:
            cls.df = clean_data(cls.df)
            cls.df = strip_spaces_from_columns(cls.df, ['First Name', 'Last Name', 'Department'])

    def test_load_data(self):
        """ Test loading data functionality """
        self.assertIsInstance(self.df, pd.DataFrame)

    def test_clean_data(self):
        """ Test if the data is cleaned properly """
        # Check if there are any null values
        self.assertFalse(self.df.isnull().values.any())

    def test_strip_spaces(self):
        """ Test if spaces are stripped from columns """
        # Check that no leading or trailing spaces are in the specified columns
        for col in ['First Name', 'Last Name', 'Department']:
            self.assertTrue((self.df[col] == self.df[col].str.strip()).all())

    def test_calculate_average_salary(self):
        """ Test average salary calculation per department """
        avg_salary_hr = calculate_average_salary(self.df, 'HR')
        self.assertIsInstance(avg_salary_hr, float)

    def test_find_employees_with_experience(self):
        """ Test finding employees with a specified number of years of experience """
        experienced_employees = find_employees_with_experience(self.df, 5)
        self.assertIsInstance(experienced_employees, list)

    def test_get_department_statistics(self):
        """ Test getting department statistics """
        stats = get_department_statistics(self.df)
        self.assertIsInstance(stats, dict)
        # Assuming 'HR' is a valid department and has data
        self.assertIn('HR', stats)
        self.assertIn('Average Salary', stats['HR'])
        self.assertIn('Average Age', stats['HR'])

if __name__ == '__main__':
    unittest.main(argv=[''], exit=False)