# -*- coding: utf-8 -*-
"""employee_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fgPqbUmPjDwelosrMgEdmEdL772iCge4

##**Task1：Data Loading and Cleaning**
###load_data(file_path)
###clean_data(df)
###strip_spaces_from_columns(df, columns)
"""

import pandas as pd

def load_data(file_path):
    try:
        df = pd.read_csv(file_path)
        print("Data loaded successfully.")
        return df
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def clean_data(df):
    # Renaming columns based on provided data
    column_names = ['Employee ID', 'First Name', 'Last Name', 'Department', 'Hire Date', 'Salary', 'Employment Status']
    df.columns = column_names

    # Handle missing values
    df = df.dropna()

    # Convert 'Hire Date' to datetime
    df['Hire Date'] = pd.to_datetime(df['Hire Date'], errors='coerce')

    # Convert 'Salary' to numeric
    df['Salary'] = pd.to_numeric(df['Salary'], errors='coerce')

    # Ensure 'Employment Status' is a categorical type
    df['Employment Status'] = df['Employment Status'].astype('category')

    # Drop rows with any remaining NaN values after conversion
    df = df.dropna()

    # Strip spaces from string columns
    string_columns = ['First Name', 'Last Name', 'Department', 'Employment Status']
    df = strip_spaces_from_columns(df, string_columns)

    print("Data cleaning completed.")
    return df

# Function to strip leading and trailing spaces from specified columns（bc I found there is a space in the front of each string column)
def strip_spaces_from_columns(df, columns):
    for column in columns:
        if column in df.columns:
            df[column] = df[column].str.strip()
    return df

"""##**Task2: Decision Making and Loop**
###calculate_average_salary(df, department)
###find_employees_with_experience(df, years)
"""

# Function to calculate average salary in a department
def calculate_average_salary(df, department):

    department_data = df[df['Department'] == department]
    if not department_data.empty:
        average_salary = department_data['Salary'].mean()
        return average_salary
    else:
        print(f"No employees found in department: {department}")
        return None

# Function to find employees with a specified number of years of experience
def find_employees_with_experience(df, years):

    current_date = pd.to_datetime('today')
    df['Hire Date'] = pd.to_datetime(df['Hire Date'])
    df['Experience'] = (current_date - df['Hire Date']).dt.days / 365.25
    experienced_employees = df[df['Experience'] >= years]
    employee_names = experienced_employees['First Name'] + ' ' + experienced_employees['Last Name']
    return employee_names.tolist()

"""##**Task 3: Functions and Modules**
###get_department_statistics(df)
"""

# Function to return a dictionary with department names as keys and their respective average salaries and average "ages" as values
def get_department_statistics(df):
    department_stats = {}
    current_date = pd.to_datetime('today')
    df['Hire Date'] = pd.to_datetime(df['Hire Date'])
    df['Experience'] = (current_date - df['Hire Date']).dt.days / 365.25 # Use 365.25 as the average number of days per year to account for leap years

    for department in df['Department'].unique():
        dept_data = df[df['Department'] == department]
        if not dept_data.empty:
            average_salary = dept_data['Salary'].mean()
            average_experience = dept_data['Experience'].mean()
            department_stats[department] = {
                'Average Salary': round(average_salary),
                'Average Age': round(average_experience)
            }
    return department_stats

"""##**Task4: Data Visualization with Matplotlib**
###plot salary_distribution(df)
###plot_average _salary_by_department(df)
"""

import pandas as pd
import matplotlib.pyplot as plt

def plot_salary_distribution(df):
    """
    Plots the distribution of salaries using a histogram and saves the plot as salary_distribution.png.

    Parameters:
    df (pd.DataFrame): The DataFrame containing employee data.
    """
    plt.figure(figsize=(10, 6))
    plt.hist(df['Salary'], bins=20, color='skyblue', edgecolor='black')
    plt.title('Salary Distribution')
    plt.xlabel('Salary')
    plt.ylabel('Frequency')
    plt.grid(axis='y')
    plt.savefig('salary_distribution.png')
    plt.close()
    print("Saved salary distribution plot as salary_distribution.png.")

def plot_average_salary_by_department(df):
    """
    Plots the average salary by department using a bar chart and saves the plot as average_salary_by_department.png.

    Parameters:
    df (pd.DataFrame): The DataFrame containing employee data.
    """
    average_salaries = df.groupby('Department')['Salary'].mean().sort_values()
    plt.figure(figsize=(12, 8))
    average_salaries.plot(kind='bar', color='lightcoral', edgecolor='black')
    plt.title('Average Salary by Department')
    plt.xlabel('Department')
    plt.ylabel('Average Salary')
    plt.xticks(rotation=45)
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig('average_salary_by_department.png')
    plt.close()
    print("Saved average salary by department plot as average_salary_by_department.png.")

"""##**Task 5: Data Visualization with Seaborn and Plotly**
###plot_salary_vs_experience(df)
###plot_age_distribution_by_department(df)
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

def plot_salary_distribution(df):
    plt.figure(figsize=(10, 6))
    plt.hist(df['Salary'], bins=20, color='skyblue', edgecolor='black')
    plt.title('Salary Distribution')
    plt.xlabel('Salary')
    plt.ylabel('Frequency')
    plt.grid(axis='y')
    plt.savefig('salary_distribution.png')
    plt.close()
    print("Saved salary distribution plot as salary_distribution.png.")

def plot_average_salary_by_department(df):
    average_salaries = df.groupby('Department')['Salary'].mean().sort_values()
    plt.figure(figsize=(12, 8))
    average_salaries.plot(kind='bar', color='lightcoral', edgecolor='black')
    plt.title('Average Salary by Department')
    plt.xlabel('Department')
    plt.ylabel('Average Salary')
    plt.xticks(rotation=45)
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig('average_salary_by_department.png')
    plt.close()
    print("Saved average salary by department plot as average_salary_by_department.png.")

def plot_salary_vs_experience(df):
    """
    Plots a scatter plot of salary vs. experience using Seaborn and saves the plot as salary_vs_experience.png.

    Parameters:
    df (pd.DataFrame): The DataFrame containing employee data.
    """
    current_date = pd.to_datetime('today')
    df['Hire Date'] = pd.to_datetime(df['Hire Date'])
    df['Experience'] = (current_date - df['Hire Date']).dt.days / 365.25

    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=df, x='Experience', y='Salary')
    plt.title('Salary vs. Experience')
    plt.xlabel('Years of Experience')
    plt.ylabel('Salary')
    plt.grid(True)
    plt.savefig('salary_vs_experience.png')
    plt.close()
    print("Saved salary vs experience plot as salary_vs_experience.png.")

def plot_age_distribution_by_department(df):
    """
    Plots the distribution of ages for each department using a box plot with Plotly and saves the plot as age_distribution_by_department.png.

    Parameters:
    df (pd.DataFrame): The DataFrame containing employee data.
    """
    current_date = pd.to_datetime('today')
    df['Hire Date'] = pd.to_datetime(df['Hire Date'])
    df['Experience'] = (current_date - df['Hire Date']).dt.days / 365.25

    fig = px.box(df, x='Department', y='Experience', points="all", title='Age Distribution by Department')
    fig.update_layout(xaxis_title='Department', yaxis_title='Years of Experience')
    fig.write_image('age_distribution_by_department.png')
    print("Saved age distribution by department plot as age_distribution_by_department.png.")